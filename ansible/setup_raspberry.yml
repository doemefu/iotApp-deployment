---
- hosts: raspberry
  become: yes
  gather_facts: yes

  vars:
    k3s_install_script: "https://get.k3s.io"
    k3s_bin_url: "https://github.com/k3s-io/k3s/releases/download/v1.32.1%2Bk3s1/k3s-arm64"
    k3s_service_file_url: "https://raw.githubusercontent.com/k3s-io/k3s/master/k3s.service"

  tasks:
    ##################################################################
    # 1. Configure Raspberry Pi Environment
    ##################################################################
    - name: Set timezone to Zurich
      timezone:
        name: Europe/Zurich

    - name: Update apt cache
      apt:
        update_cache: yes
        force_apt_get: yes

    - name: Upgrade packages
      apt:
        upgrade: dist
        force_apt_get: yes
      register: upgrade_result

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot the system if necessary
      reboot:
        reboot_timeout: 300
      when: reboot_required.stat.exists

    - name: Wait for server to come back after reboot
      wait_for_connection:
        delay: 15
        timeout: 300
      when: reboot_required.stat.exists

    - name: Install required dependencies
      apt:
        name:
          - curl
          - socat
          - apt-transport-https
          - ca-certificates
          - software-properties-common
        state: present

    ##################################################################
    # 2. Install K3s (Manual Download instead of curl | sh)
    ##################################################################
    - name: Download K3s installation script
      get_url:
        url: "{{ k3s_install_script }}"
        dest: /tmp/k3s_install.sh
        mode: '0755'

    - name: Run K3s installation script
      command: /tmp/k3s_install.sh
      args:
        creates: /usr/local/bin/k3s

    - name: Enable and start K3s service
      service:
        name: k3s
        state: started
        enabled: true

    ##################################################################
    # 3. Install Helm from Official Apt Repo (No piping from net)
    ##################################################################
    - name: Add GPG key for Helm
      apt_key:
        url: "https://baltocdn.com/helm/signing.asc"
        state: present

    - name: Add official Helm apt repository
      apt_repository:
        repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
        state: present

    - name: Update apt cache (post-Helm repo add)
      apt:
        update_cache: yes

    - name: Install Helm
      apt:
        name: helm
        state: present

    ##################################################################
    # 4. Health Check: Ensure K3s is Running
    ##################################################################
    - name: Wait for K3s API Server to be ready
      ansible.builtin.command: kubectl cluster-info
      register: k3s_status
      until: k3s_status.rc == 0
      retries: 20
      delay: 5
      changed_when: false

    - name: Ensure K3s systemd service is running
      ansible.builtin.systemd:
        name: k3s
        state: started
        enabled: true
      register: k3s_service_status

    - name: Fail if K3s is not running
      ansible.builtin.fail:
        msg: "K3s service is not running!"
      when: k3s_service_status.status.ActiveState != "active"
